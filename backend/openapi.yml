openapi: 3.0.0
info:
  title: Flask SQLAlchemy RESTful API
  version: 1.0.0
  description: |
    - 產生的 OpenAPI 文件，對應 Flask + SQLAlchemy 所有 RESTful API。
    
    - 所有 API 回傳 JSON。

servers:
  - url: http://127.0.0.1:8000
    description: Development server
  
tags:
  - User
  - Job
  - Recruit
  - Search

paths:
  /user/{user_id}:
    get:
      tags: [User]
      summary: Get user by user_id
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  email:
                    type: string
                  created_at:
                    type: string
                    format: date
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "User not found"

  /register:
    post:
      tags: [User]
      summary: Register
      description: Register a new user with phone number, password, and email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - password
                - email
              properties:
                phone_number:
                  type: string
                  pattern: '^[0-9]{8,15}$'
                  description: Phone number (8-15 digits only)
                  example: "0912345678"
                password:
                  type: string
                  minLength: 6
                  description: Password (minimum 6 characters)
                  example: "password123"
                email:
                  type: string
                  format: email
                  description: Email address (required)
                  example: "user@example.com"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request - missing required fields or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      missing_params:
                        value: "Phone number, password and email are required"
                      invalid_phone:
                        value: "Phone number must contain only digits"
                      phone_length:
                        value: "Phone number must be between 8 and 15 digits"
                      password_length:
                        value: "Password must be at least 6 characters long"
                      invalid_email:
                        value: "Invalid email format"
        '409':
          description: Conflict - phone number or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      phone_exists:
                        value: "Phone number already exists"
                      email_exists:
                        value: "Email already exists"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration Failed"

  /login:
    post:
      tags: [User]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - password
              properties:
                phone_number:
                  type: string
                  example: "0912345678"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: User login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Already logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyLoggedInResponse'
        '404':
          description: Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lack of necessary parameter"
        '401':
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "phone number or password not correct"

  /logout:
    post:
      tags: [User]
      summary: Logout user
      description: Clear user session and logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successfully"

  /current_user:
    get:
      tags: [User]
      summary: Get current logged in user
      description: Retrieve information about the currently logged in user from session
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not logged in"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
  
  /user/profile:
    put:
      tags: [User]
      summary: Update user profile
      description: "Update current logged-in user's profile (email and password only). Note: If password is changed, user will be automatically logged out for security."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: New email address
                  example: "newemail@example.com"
                password:
                  type: string
                  description: New password (minimum 6 characters)
                  example: "newpassword123"
              description: "At least one field (email or password) must be provided"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      email_updated:
                        value: "Profile updated successfully"
                      password_updated:
                        value: "Password updated successfully. Please login again."
                  user:
                    $ref: '#/components/schemas/User'
                  logout:
                    type: boolean
                    description: True if user was logged out (when password changed)
                    example: true
        '400':
          description: Bad request (invalid data, no fields provided, etc.)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      no_data:
                        value: "No data provided"
                      no_fields:
                        value: "No valid fields to update (email or password)"
                      invalid_email:
                        value: "Invalid email format"
                      short_password:
                        value: "Password must be at least 6 characters long"
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please login first"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already exists"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to update profile"

  /job/{job_id}:
    get:
      tags: [Job]
      summary: Get job by job_id
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: integer
                  job_name:
                    type: string
                  type:
                    type: string
                  payment:
                    type: string
                  date:
                    type: string
                  status:
                    type: string
                    enum: [open, closed]
                    example: "open"
                  job_provider_id:
                    type: integer
                  created_at:
                    type: date
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              
    delete:
      tags: [Job]
      summary: Delete job
      description: Delete a job posting (only job provider can delete)
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Job deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job deleted successfully"
                  deleted_job_id:
                    type: integer
                    example: 1
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please login first"
        '403':
          description: Not authorized to delete this job
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this job"
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job does not exist"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to delete job"

  /job/provider/{provider_id}:
    get:
      tags: [Job]
      summary: Get jobs by provider ID (public endpoint)
      description: Get all jobs posted by a specific provider. This is a public endpoint that doesn't require authentication. For getting your own jobs, use /job/my-jobs instead.
      parameters:
        - in: path
          name: provider_id
          required: true
          schema:
            type: integer
      responses:  # 修正：response -> responses
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    job_id:
                      type: integer
                      example: 1
                    job_name:
                      type: string
                      example: "餐廳服務生"
                    type:
                      type: string
                      example: "服務業"
                    payment:
                      type: string
                      example: "200 - 300"
                    date:
                      type: string
                      example: "2023-12-31 - 2023-12-01"
                    status:
                      type: string
                      enum: [open, closed]
                      example: "open"
                    job_provider_id:
                      type: integer
                      example: 1
                    create_at:
                      type: string
                      format: date
                      example: "2023-11-01"
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Provider is not exist"

  /job/my-jobs:
    get:
      tags: [Job]
      summary: Get my published jobs
      description: Retrieve all jobs published by the currently logged in user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider_id:
                    type: integer
                    example: 123
                  provider_email:
                    type: string
                    example: "employer@example.com"
                  jobs:
                    type: array
                    items:
                      type: object
                      properties:
                        job_id:
                          type: integer
                          example: 1
                        job_name:
                          type: string
                          example: "軟體工程師"
                        type:
                          type: string
                          example: "全職"
                        payment:
                          type: string
                          example: "50000 ~ 80000"
                        date:
                          type: string
                          example: "2025-01-01 ~ 2025-03-31"
                        status:
                          type: string
                          enum: [open, closed]
                          example: "open"
                        job_provider_id:
                          type: integer
                          example: 123
                        create_at:
                          type: string
                          format: date
                          example: "2025-09-20"
                  total_jobs:
                    type: integer
                    example: 5
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please login first"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"

  /job:
    post:
      tags: [Job]
      summary: Create new job
      description: Create a new job posting (provider_id automatically obtained from session)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - job_name
                - payment_low
                - payment_high
                - date_start
                - date_end
              properties:
                job_name:
                  type: string
                  example: "餐廳服務生"
                payment_low:
                  type: integer
                  example: 200
                payment_high:
                  type: integer
                  example: 300
                date_start:
                  type: string
                  format: date
                  example: "2023-12-01"
                date_end:
                  type: string
                  format: date
                  example: "2023-12-31"
                job_type:
                  type: string
                  example: "服務業"
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Create Job Successfully"
                  Job:
                    type: object
                    properties:
                      job_id:
                        type: integer
                        example: 1
                      job_name:
                        type: string
                        example: "餐廳服務生"
                      type:
                        type: string
                        example: "服務業"
                      payment:
                        type: string
                        example: "200 ~ 300"
                      date:
                        type: string
                        example: "2023-12-01 ~ 2023-12-31"
                      status:
                        type: string
                        enum: [open, closed]
                        example: "open"
                      job_provider_id:
                        type: integer
                        example: 1
                      create_at:
                        type: string
                        format: date
                        example: "2023-11-01"
        '400':
          description: Bad request - missing required fields or invalid date format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Date start must be earlier than date end"
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please login first"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Create Job Failed"
                  error:
                    type: string
                    example: "Create Job Successfully"
                  Job:
                    type: object
                    properties:
                      job_id:
                        type: integer
                        example: 1
                      job_name:
                        type: string
                        example: "餐廳服務生"
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lack of necessary information"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Create Job Failed"
                  error:
                    type: string
    get:
      tags: [Job]
      summary: Get all jobs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    job_id:
                      type: integer
                      example: 1
                    job_name:
                      type: string
                      example: "餐廳服務生"
                    type:
                      type: string
                      example: "服務業"
                    payment:
                      type: string
                      example: "200 - 300"
                    date:
                      type: string
                      example: "2023-12-01 - 2023-12-31"
                    status:
                      type: string
                      enum: [open, closed]
                      example: "open"
                    job_provider_id:
                      type: integer
                      example: 1
                    create_at:
                      type: string
                      format: date
                      example: "2023-11-01"
        '404':
          description: No jobs found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No jobs found"

  /job/{job_id}/status:
    put:
      tags: [Job]
      summary: Update job status
      description: Update job status to open or close applications (only job provider can update)
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [open, closed]
                  description: New status for the job
                  example: "closed"
      responses:
        '200':
          description: Job status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job closed for applications"
                  job:
                    type: object
                    properties:
                      job_id:
                        type: integer
                        example: 1
                      job_name:
                        type: string
                        example: "餐廳服務生"
                      status:
                        type: string
                        enum: [open, closed]
                        example: "closed"
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Status must be either 'open' or 'closed'"
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please login first"
        '403':
          description: Not authorized to update this job
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this job status"
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job does not exist"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to update job status"

  /recruit/apply:
    post:
      tags: [Recruit]
      summary: Apply for a job
      description: Submit a job application (simplified version - only requires job_id, applicant_id automatically obtained from session)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - job_id
              properties:
                job_id:
                  type: integer
                  description: ID of the job to apply for
                  example: 1
      responses:
        '201':
          description: Application submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application submitted successfully"
                  application:
                    $ref: '#/components/schemas/JobApplication'
        '400':
          description: Bad request (missing fields, applying to own job, job closed, etc.)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This job is no longer accepting applications"
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Applicant or Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already applied for this job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recruit/applications:
    get:
      tags: [Recruit]
      summary: Get my job applications
      description: Retrieve all job applications submitted by the current logged-in user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  applications:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobApplicationForApplicant'
                  total_applications:
                    type: integer
                    example: 3
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please login first"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"

  /recruit/applications/user/{user_id}:
    get:
      tags: [Recruit]
      summary: Get user's job applications
      description: Retrieve all job applications submitted by a specific user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: ID of the user
          example: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  applications:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobApplicationForApplicant'
                  total_applications:
                    type: integer
                    example: 1
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recruit/applications/job/{job_id}:
    get:
      tags: [Recruit]
      summary: Get job applications for a specific job
      description: Retrieve all applications for a specific job (for employers only - automatically verified through session)
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
          description: ID of the job
          example: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: integer
                    example: 1
                  job_name:
                    type: string
                    example: "軟體工程師"
                  applications:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobApplicationForEmployer'
                  total_applications:
                    type: integer
                    example: 1
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to view this job's applications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recruit/application/{application_id}/review:
    put:
      tags: [Recruit]
      summary: Review a job application
      description: Employer can accept or reject a job application (employer identity automatically verified through session)
      parameters:
        - in: path
          name: application_id
          required: true
          schema:
            type: integer
          description: ID of the application to review
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [accept, reject]
                  description: Action to take on the application
                  example: "accept"
      responses:
        '200':
          description: Application reviewed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application accepted successfully"
                  application:
                    $ref: '#/components/schemas/JobApplication'
        '400':
          description: Bad request (invalid action or already reviewed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to review this application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recruit/application/{application_id}:
    get:
      tags: [Recruit]
      summary: Get application details
      description: Retrieve details of a specific job application
      parameters:
        - in: path
          name: application_id
          required: true
          schema:
            type: integer
          description: ID of the application
          example: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags: [Recruit]
      summary: Withdraw application
      description: Applicant can withdraw their job application (only if not yet reviewed, applicant identity automatically verified through session)
      parameters:
        - in: path
          name: application_id
          required: true
          schema:
            type: integer
          description: ID of the application to withdraw
          example: 1
      responses:
        '200':
          description: Application withdrawn successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application withdrawn successfully"
        '400':
          description: Cannot withdraw reviewed application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to withdraw this application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /search/jobs:
    get:
      tags: [Search]
      summary: Search jobs
      description: Search for jobs by name, type, or date range
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Search jobs by name (partial match)
          example: "工程師"
        - in: query
          name: type
          schema:
            type: string
          description: Search jobs by type (partial match)
          example: "服務業"
        - in: query
          name: date_start
          schema:
            type: string
            format: date
          description: Search jobs available from this date (YYYY-MM-DD)
          example: "2023-12-01"
        - in: query
          name: date_end
          schema:
            type: string
            format: date
          description: Search jobs available until this date (YYYY-MM-DD)
          example: "2023-12-31"
        - in: query
          name: status
          schema:
            type: string
            enum: [open, closed]
            default: open
          description: Filter by job status
          example: "open"
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  search_params:
                    type: object
                    description: Applied search parameters
                    properties:
                      name:
                        type: string
                        example: "工程師"
                      type:
                        type: string
                        example: "服務業"
                      date_start:
                        type: string
                        example: "2023-12-01"
                      date_end:
                        type: string
                        example: "2023-12-31"
                      status:
                        type: string
                        example: "open"
                  total_results:
                    type: integer
                    example: 5
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: Invalid date format or date range
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      invalid_format:
                        value: "Invalid date_start format. Please use YYYY-MM-DD format"
                      invalid_range:
                        value: "Search start date must be earlier than search end date"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to search jobs"

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        email:
          type: string
          example: "user@example.com"
        created_at:
          type: string
          format: date
          example: "2025-09-20"
    
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login Successfully"
        User:
          $ref: '#/components/schemas/User'
    
    AlreadyLoggedInResponse:
      type: object
      properties:
        message:
          type: string
          example: "Already logged in"
        User:
          $ref: '#/components/schemas/User'
    
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: "Register Successfully"
        User:
          type: string
          description: User representation string
          example: "<User 1>"
    
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "An error occurred"
    
    Job:
      type: object
      properties:
        job_id:
          type: integer
          example: 1
        job_name:
          type: string
          example: "餐廳服務生"
        type:
          type: string
          example: "服務業"
        payment:
          type: string
          example: "200 ~ 300"
        date:
          type: string
          example: "2023-12-01 ~ 2023-12-31"
        status:
          type: string
          enum: [open, closed]
          example: "open"
        job_provider_id:
          type: integer
          example: 1
        create_at:
          type: string
          format: date
          example: "2023-11-01"
    
    JobApplication:
      type: object
      properties:
        application_id:
          type: integer
          example: 1
        applicant_id:
          type: integer
          example: 1
        job_id:
          type: integer
          example: 1
        job_name:
          type: string
          example: "軟體工程師"
        applicant_email:
          type: string
          example: "applicant@example.com"
        status:
          type: string
          enum: [applied, accepted, rejected]
          example: "applied"
        applied_at:
          type: string
          format: date-time
          example: "2023-11-15T10:30:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-11-15T10:30:00.000Z"
    
    JobApplicationForApplicant:
      type: object
      properties:
        application_id:
          type: integer
          example: 1
        job_id:
          type: integer
          example: 1
        job_name:
          type: string
          example: "軟體工程師"
        company_email:
          type: string
          example: "company@example.com"
        status:
          type: string
          enum: [applied, accepted, rejected]
          example: "applied"
        applied_at:
          type: string
          format: date-time
          example: "2023-11-15T10:30:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-11-15T10:30:00.000Z"
    
    JobApplicationForEmployer:
      type: object
      properties:
        application_id:
          type: integer
          example: 1
        applicant_id:
          type: integer
          example: 1
        applicant_email:
          type: string
          example: "applicant@example.com"
        status:
          type: string
          enum: [applied, accepted, rejected]
          example: "applied"
        applied_at:
          type: string
          format: date-time
          example: "2023-11-15T10:30:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-11-15T10:30:00.000Z"
